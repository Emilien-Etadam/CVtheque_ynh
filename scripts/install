#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# MANAGE SCRIPT FAILURE
#=================================================

ynh_clean_setup () {
	true
}
# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# RETRIEVE ARGUMENTS FROM THE MANIFEST
#=================================================

domain=$YNH_APP_ARG_DOMAIN
path_url=$YNH_APP_ARG_PATH
admin=$YNH_APP_ARG_ADMIN
is_public=$YNH_APP_ARG_IS_PUBLIC

app=$YNH_APP_INSTANCE_NAME

#=================================================
# CHECK IF THE APP CAN BE INSTALLED WITH THESE ARGS
#=================================================
ynh_script_progression --message="Validating installation parameters..." --weight=1

final_path=/var/www/$app
# If the path already exists, remove it
if [ -e "$final_path" ]; then
    ynh_script_progression --message="Removing existing directory..." --weight=1
    ynh_secure_remove --file="$final_path"
fi

# Register (book) web path
ynh_webpath_register --app=$app --domain=$domain --path_url=$path_url

#=================================================
# STORE SETTINGS FROM MANIFEST
#=================================================
ynh_script_progression --message="Storing installation settings..." --weight=1

ynh_app_setting_set --app=$app --key=domain --value=$domain
ynh_app_setting_set --app=$app --key=path --value=$path_url
ynh_app_setting_set --app=$app --key=admin --value=$admin
ynh_app_setting_set --app=$app --key=is_public --value=$is_public

#=================================================
# STANDARD MODIFICATIONS
#=================================================
# INSTALL DEPENDENCIES
#=================================================
ynh_script_progression --message="Installing dependencies..." --weight=5

ynh_install_app_dependencies $pkg_dependencies

#=================================================
# CREATE DEDICATED USER
#=================================================
ynh_script_progression --message="Configuring system user..." --weight=1

# Create a system user
ynh_system_user_create --username=$app --home_dir="$final_path"

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================
ynh_script_progression --message="Setting up source files..." --weight=3

# Download and uncompress the source without checking integrity
mkdir -p "$final_path"
# Get the source URL from app.src
src_url=$(grep SOURCE_URL= ../conf/app.src | cut -d= -f2-)
# Download the source
wget -q -O /tmp/app.zip "$src_url"
# Extract the source
unzip -q /tmp/app.zip -d /tmp/
# Get the extracted directory name
src_dir=$(find /tmp -maxdepth 1 -type d -name "CVtheque-*" | head -n 1)
# Copy the application files to the final path
cp -r "$src_dir"/*.php "$final_path"
cp -r "$src_dir"/*.css "$final_path"
cp -r "$src_dir"/*.js "$final_path"
cp -r "$src_dir"/LICENSE "$final_path"
cp -r "$src_dir"/sources/* "$final_path"
# Create uploads and temp directories if they don't exist
mkdir -p "$final_path/uploads"
mkdir -p "$final_path/temp"
# Clean up
rm -rf /tmp/app.zip "$src_dir"

#=================================================
# NGINX CONFIGURATION
#=================================================
ynh_script_progression --message="Configuring NGINX web server..." --weight=1

# Create a dedicated NGINX config
ynh_add_nginx_config

#=================================================
# PHP-FPM CONFIGURATION
#=================================================
ynh_script_progression --message="Configuring PHP-FPM..." --weight=1

# Create a dedicated PHP-FPM config
# Ensure we use PHP 8.0 as defined in _common.sh
phpversion="8.0"
ynh_app_setting_set --app=$app --key=phpversion --value=$phpversion

# Create the PHP-FPM socket directory if it doesn't exist
if [ ! -d "/var/run/php" ]; then
    mkdir -p /var/run/php
    chmod 755 /var/run/php
fi
if [ ! -d "/var/run/php/php8.0-fpm" ]; then
    mkdir -p /var/run/php/php8.0-fpm
    chmod 755 /var/run/php/php8.0-fpm
fi

# Add PHP-FPM configuration
ynh_add_fpm_config --phpversion=$phpversion

#=================================================
# SPECIFIC SETUP
#=================================================
# CREATE DIRECTORIES
#=================================================
ynh_script_progression --message="Creating necessary directories..." --weight=1

# Create uploads and temp directories
mkdir -p "$final_path/uploads"
mkdir -p "$final_path/temp"

# Set permissions
chmod 750 "$final_path"
chmod 750 "$final_path/uploads"
chmod 750 "$final_path/temp"
chown -R $app:www-data "$final_path"
chown -R $app:www-data "$final_path/uploads"
chown -R $app:www-data "$final_path/temp"

#=================================================
# INITIALIZE DATABASE
#=================================================
ynh_script_progression --message="Initializing database..." --weight=1

# Create the SQLite database and initialize the structure
cat > "$final_path/init_db.php" << 'EOPHP'
<?php
// Initialize the SQLite database
$dbPath = 'cv.db';
try {
    // Open or create the database
    $db = new SQLite3($dbPath);
    
    // Check if the candidates table exists
    $tableCheck = $db->query("SELECT name FROM sqlite_master WHERE type='table' AND name='candidates'");
    if (!$tableCheck->fetchArray()) {
        // Create the table candidates with all necessary columns
        $db->exec("CREATE TABLE candidates (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            email TEXT,
            position TEXT,
            cv_path TEXT,
            application_date TEXT,
            comments TEXT,
            status TEXT DEFAULT 'Nouveau',
            skills TEXT,
            experience TEXT,
            education TEXT
        )");
    }
} catch (Exception $e) {
    die("Database error: " . $e->getMessage());
}
?>
EOPHP

# Execute the initialization script
pushd "$final_path" || ynh_die
php init_db.php
popd || ynh_die

# Set proper permissions for the database file
if [ -f "$final_path/cv.db" ]; then
    chown $app:www-data "$final_path/cv.db"
    chmod 660 "$final_path/cv.db"
fi

# Remove the initialization script
rm -f "$final_path/init_db.php"

#=================================================
# SETUP SSO AUTHENTICATION
#=================================================
ynh_script_progression --message="Configuring SSO authentication..." --weight=1

# Create the SSO authentication file
cat > "$final_path/sso_auth.php" << 'EOF'
<?php
// Vérifier si l'utilisateur est authentifié via le SSO de YunoHost
if (!isset($_SERVER['REMOTE_USER']) && !isset($_SERVER['PHP_AUTH_USER'])) {
    // L'utilisateur n'est pas authentifié, rediriger vers la page de connexion
    header('Location: /yunohost/sso/');
    exit;
}
// L'utilisateur est authentifié, on peut continuer
$user = isset($_SERVER['REMOTE_USER']) ? $_SERVER['REMOTE_USER'] : $_SERVER['PHP_AUTH_USER'];
?>
EOF

# Modify index.php to include SSO authentication if the app is not public
if [ $is_public -eq 0 ]; then
    # Add SSO authentication at the beginning of each PHP file
    for file in "$final_path"/*.php; do
        if [ -f "$file" ] && [ "$(basename "$file")" != "sso_auth.php" ]; then
            # Check if the file already includes the SSO authentication
            if ! grep -q "require_once 'sso_auth.php';" "$file"; then
                # Add the include after the first PHP opening tag
                sed -i '1s/<?php/<?php\nrequire_once "sso_auth.php";/' "$file"
            fi
        fi
    done
fi

#=================================================
# SETUP APPLICATION WITH CURL
#=================================================
ynh_script_progression --message="Finalizing installation..." --weight=1

# Set app as public or private
if [ $is_public -eq 1 ]; then
    # Make app public
    ynh_permission_update --permission="main" --add="visitors"
else
    # Remove visitors group
    ynh_permission_update --permission="main" --remove="visitors"
    # Add the admin user to allowed users
    ynh_permission_update --permission="main" --add="$admin"
fi

#=================================================
# RELOAD NGINX
#=================================================
ynh_script_progression --message="Reloading NGINX web server..." --weight=1

ynh_systemd_action --service_name=nginx --action=reload

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression --message="Installation of $app completed" --last
