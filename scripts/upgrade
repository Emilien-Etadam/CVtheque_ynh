#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# LOAD SETTINGS
#=================================================
ynh_script_progression --message="Loading installation settings..." --weight=1

app=$YNH_APP_INSTANCE_NAME

domain=$(ynh_app_setting_get --app=$app --key=domain)
path_url=$(ynh_app_setting_get --app=$app --key=path)
is_public=$(ynh_app_setting_get --app=$app --key=is_public)
final_path=$(ynh_app_setting_get --app=$app --key=final_path)
admin=$(ynh_app_setting_get --app=$app --key=admin)

#=================================================
# CHECK VERSION
#=================================================
ynh_script_progression --message="Checking version..." --weight=1

upgrade_type=$(ynh_check_app_version_changed)

#=================================================
# BACKUP BEFORE UPGRADE THEN ACTIVE TRAP
#=================================================
ynh_script_progression --message="Backing up the app before upgrading (may take a while)..." --weight=1

# Backup the current version of the app
ynh_backup_before_upgrade
ynh_clean_setup () {
	# Restore it if the upgrade fails
	ynh_restore_upgradebackup
}
# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# STANDARD UPGRADE STEPS
#=================================================
# STOP SYSTEMD SERVICE
#=================================================
ynh_script_progression --message="Stopping systemd service..." --weight=1

ynh_systemd_action --service_name=$app --action="stop" --log_path="/var/log/$app/$app.log"

#=================================================
# ENSURE DOWNWARD COMPATIBILITY
#=================================================
ynh_script_progression --message="Ensuring downward compatibility..." --weight=1

# If final_path doesn't exist, create it
if [ -z "$final_path" ]; then
	final_path=/var/www/$app
	ynh_app_setting_set --app=$app --key=final_path --value=$final_path
fi

#=================================================
# CREATE DEDICATED USER
#=================================================
ynh_script_progression --message="Making sure dedicated system user exists..." --weight=1

# Create a dedicated user (if not existing)
ynh_system_user_create --username=$app --home_dir="$final_path"

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================

if [ "$upgrade_type" == "UPGRADE_APP" ]
then
	ynh_script_progression --message="Upgrading source files..." --weight=1

	# Download, check integrity, uncompress and patch the source from app.src
	ynh_setup_source --dest_dir="$final_path" --keep="uploads temp cv.db"
fi

#=================================================
# NGINX CONFIGURATION
#=================================================
ynh_script_progression --message="Upgrading NGINX web server configuration..." --weight=1

# Create a dedicated NGINX config
ynh_add_nginx_config

#=================================================
# PHP-FPM CONFIGURATION
#=================================================
ynh_script_progression --message="Upgrading PHP-FPM configuration..." --weight=1

# Create a dedicated PHP-FPM config
ynh_add_fpm_config

#=================================================
# SPECIFIC UPGRADE
#=================================================
# CREATE DIRECTORIES
#=================================================
ynh_script_progression --message="Creating necessary directories..." --weight=1

# Create uploads and temp directories if they don't exist
create_dir_if_not_exists "$final_path/uploads"
create_dir_if_not_exists "$final_path/temp"

#=================================================
# SETUP SSO AUTHENTICATION
#=================================================
ynh_script_progression --message="Configuring SSO authentication..." --weight=1

# Create the SSO authentication file if it doesn't exist
if [ ! -f "$final_path/sso_auth.php" ]; then
    cat > "$final_path/sso_auth.php" << 'EOF'
<?php
// Vérifier si l'utilisateur est authentifié via le SSO de YunoHost
if (!isset($_SERVER['REMOTE_USER']) && !isset($_SERVER['PHP_AUTH_USER'])) {
    // L'utilisateur n'est pas authentifié, rediriger vers la page de connexion
    header('Location: /yunohost/sso/');
    exit;
}
// L'utilisateur est authentifié, on peut continuer
$user = isset($_SERVER['REMOTE_USER']) ? $_SERVER['REMOTE_USER'] : $_SERVER['PHP_AUTH_USER'];
?>
EOF
fi

# Modify index.php to include SSO authentication if the app is not public
if [ $is_public -eq 0 ]; then
    # Add SSO authentication at the beginning of each PHP file
    for file in "$final_path"/*.php; do
        if [ -f "$file" ] && [ "$(basename "$file")" != "sso_auth.php" ]; then
            # Check if the file already includes the SSO authentication
            if ! grep -q "require_once 'sso_auth.php';" "$file"; then
                # Add the include after the first PHP opening tag
                sed -i '1s/<?php/<?php\nrequire_once "sso_auth.php";/' "$file"
            fi
        fi
    done
fi

#=================================================
# UPDATE PERMISSIONS
#=================================================
ynh_script_progression --message="Updating permissions..." --weight=1

# Set permissions
chmod 750 "$final_path"
chmod 750 "$final_path/uploads"
chmod 750 "$final_path/temp"
chown -R $app:www-data "$final_path"
chown -R $app:www-data "$final_path/uploads"
chown -R $app:www-data "$final_path/temp"

#=================================================
# SETUP APPLICATION WITH CURL
#=================================================
ynh_script_progression --message="Finalizing upgrade..." --weight=1

# Set app as public or private
if [ $is_public -eq 1 ]; then
    # Make app public
    ynh_permission_update --permission="main" --add="visitors"
else
    # Remove visitors group
    ynh_permission_update --permission="main" --remove="visitors"
    # Add the admin user to allowed users
    ynh_permission_update --permission="main" --add="$admin"
fi

#=================================================
# RELOAD NGINX
#=================================================
ynh_script_progression --message="Reloading NGINX web server..." --weight=1

ynh_systemd_action --service_name=nginx --action=reload

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression --message="Upgrade of $app completed" --last
